//_________exercise 1___________
program CountHighestElements;

const
  SIZE = 10;

var
  arr: array[1..SIZE] of Integer;
  i, maxVal, count: Integer;

begin
  { Read the array elements from the user }
  writeln('Enter the ', SIZE, ' array elements:');
  for i := 1 to SIZE do
    readln(arr[i]);

  { Find the maximum value in the array }
  maxVal := arr[1];
  for i := 2 to SIZE do
  begin
    if arr[i] > maxVal then
      maxVal := arr[i];
  end;

  { Count the number of elements with the maximum value }
  count := 0;
  for i := 1 to SIZE do
  begin
    if arr[i] = maxVal then
      count := count + 1;
  end;

  { Display the count and indices of elements with the maximum value }
  writeln('Number of elements with the highest value (', maxVal, '): ', count);
  writeln('Indices of elements with the highest value:');
  for i := 1 to SIZE do
  begin
    if arr[i] = maxVal then
      writeln(i);
  end;

  readln;
end.

//_________exercise 2___________
program RearrangeZeros;

const
  MAX_SIZE = 100;

type
  IntArray = array[1..MAX_SIZE] of Integer;

function HasZeroDigit(num: Integer): Boolean;
begin
  while num <> 0 do
  begin
    if num mod 10 = 0 then
    begin
      HasZeroDigit := True;
      Exit;
    end;
    num := num div 10;
  end;
  HasZeroDigit := False;
end;

procedure RearrangeZeros(var arr: IntArray; size: Integer);
var
  zeroCount, i, temp: Integer;
begin
  zeroCount := 0;
  for i := 1 to size do
  begin
    if HasZeroDigit(arr[i]) then
    begin
      Inc(zeroCount);
      if zeroCount <= 2 then
      begin
        temp := arr[i];
        arr[i] := arr[zeroCount];
        arr[zeroCount] := temp;
      end;
    end;
  end;
end;

var
  arr: IntArray;
  size, i: Integer;
begin
  // Read the size of the array
  Write('Enter the size of the array (up to 100): ');
  ReadLn(size);

  // Read the array elements
  Write('Enter the elements of the array: ');
  for i := 1 to size do
    Read(arr[i]);

  // Rearrange the array
  RearrangeZeros(arr, size);

  // Display the rearranged array
  Write('Array after rearranging: ');
  for i := 1 to size do
    Write(arr[i], ' ');
  WriteLn;

  ReadLn;
end.




//_________exercise 3___________
program MaxConsecutiveVowelConsonantChain;

var
  inputString: string;
  i, j, maxCount, currentCount: Integer;
  vowels: set of Char;

begin
  vowels := ['A', 'E', 'I', 'O', 'U'];

  { Read the input string from the user }
  writeln('Enter the chain of characters (only A, B, C, D, E allowed):');
  readln(inputString);

  { Find the maximum number of consecutive characters }
  maxCount := 0;
  currentCount := 0;
  for i := 1 to Length(inputString) do
  begin
    { If the current character is a vowel, start counting consecutive consonants }
    if inputString[i] in vowels then
    begin
      currentCount := 0;
      for j := i+1 to Length(inputString) do
      begin
        if inputString[j] in vowels then
          break
        else
          currentCount := currentCount + 1;
      end;
      if currentCount > maxCount then
        maxCount := currentCount;
    end;
  end;

  { Display the result }
  writeln('The maximum number of consecutive characters with first character a vowel and the rest consonants is:');
  writeln(maxCount);

  readln;
end.



//_________exercise 4___________
{$mode objfpc}{$H+}

uses
  SysUtils, Classes;

function FindWordsWithAdjacentLetters(const text: string): TStringList;
var
  words: TStringList;
  word: string;
  i: Integer;
begin
  words := TStringList.Create;
  try
    // Split the text into words
    ExtractStrings([' '], [], PChar(text), words);

    // Check for words with adjacent identical letters
    Result := TStringList.Create;
    for word in words do
    begin
      for i := 2 to Length(word) do
      begin
        if UTF8Pos(word[i], word, i - 1) = i then
        begin
          Result.Add(word);
          Break;
        end;
      end;
    end;
  finally
    words.Free;
  end;
end;

var
  inputText: string;
  matchedWords: TStringList;
  word: string;
begin
  Write('Enter the text: ');
  ReadLn(inputText);

  // Find words with adjacent identical letters
  matchedWords := FindWordsWithAdjacentLetters(inputText);

  // Display the matched words and their count
  WriteLn('Words with adjacent identical letters:');
  for word in matchedWords do
    WriteLn(word);
  WriteLn('Total matched words found:', matchedWords.Count);

  matchedWords.Free;
end.


